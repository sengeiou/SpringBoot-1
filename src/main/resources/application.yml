spring:
  # 指定启动的配置
  profiles:
    active: dev
  application: 
    name: springboot
  http:
    servlet:
      multipart:
        max-file-size: 50Mb
        max-request-size: 100Mb
    encoding:
      force: true
      charset: UTF-8
      enabled: true
  jackson:
    serialization:
      write-dates-as-timestamps: true
  mail:
    host: smtp.qq.com
    port: 587
    username: kungzai@qq.com
    password: hmtgrjhxmroubecd
  thymeleaf:
    cache: false
    prefix: classpath:/templates/
  datasource:
    base:
      #监控统计拦截的filters
      filters: stat
      type: com.alibaba.druid.pool.DruidDataSource
      jdbc-url: jdbc:mysql://192.168.2.7:185/ht_micro_record?useUnicode=true&characterEncoding=UTF-8
      username: root
      password: 123456
      driver-class-name: com.mysql.jdbc.Driver
      max-idle: 10
      max-wait: 10000
      min-idle: 5
      initial-size: 5
      validation-query: SELECT 1
      test-on-borrow: false
      test-while-idle: true
      time-between-eviction-runs-millis: 18800
    dic:
      #监控统计拦截的filters
      filters: stat
      type: com.alibaba.druid.pool.DruidDataSource
      jdbc-url: jdbc:mysql://192.168.1.48:3306/ht_nlp?useUnicode=true&characterEncoding=UTF-8&useSSL=false
      username: root
      password: Sonar@1234
      driver-class-name: com.mysql.jdbc.Driver
      max-idle: 10
      max-wait: 10000
      min-idle: 5
      initial-size: 5
      validation-query: SELECT 1
      test-on-borrow: false
      test-while-idle: true
      time-between-eviction-runs-millis: 18800
#    driver-class-name: com.mysql.jdbc.Driver
#    url: jdbc:mysql://127.0.0.1:3306/springboot?characterEncoding=utf-8&useSSL=false&serverTimezone=UTC
#    username: root
#    password:
#    hikari:
#      maximum-pool-size: 20
#      minimum-idle: 5
  jpa:
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    generate-ddl: true
    hibernate:
      ddl-auto: update
#  data:
#    mongodb:
#      always-use-m-beans: false
#      authentication-database: 'auth_dev '
#      connect-timeout: 10000
#      heartbeat-connect-timeout: 20000
#      heartbeat-frequency: 10000
#      heartbeat-socket-timeout: 20000
#      local-threshold: 15
#      max-connection-idel-time: 0
#      max-connection-life-time: 0
#      max-connections-per-host: 100
#      max-wait-time: 120000
#      min-connections-per-host: 10
#      min-heartbeat-frequency: 500
#      server-selection-timeout: 30000
#      socket-keep-alive: false
#      socket-timeout: 0
#      ssl-enabled: false
#      ssl-invalid-host-name-allowed: false
#      threads-allowed-to-block-for-connection-multiplier: 5
#      uri: mongodb://127.0.0.1:27017/mydb

  main:
    allow-bean-definition-overriding: true
  redis:
    host: 127.0.0.1
    database: 1
    port: 6379
    password: ''
    timeout: 1s
    jedis:
      pool:
        max-active: 20
        max-idle: 20
        min-idle: 10
        max-wait: -1ms
  cache:
    redis:
      use-key-prefix: true
      key-prefix: dev
      cache-null-values: false
      time-to-live: 20s

mongodb:
  primary:
    database: primary
    uri: mongodb://127.0.0.1:27017
  secondary:
    database: secondary
    uri: mongodb://127.0.0.1:27017

mybatis:
  mapper-locations: classpath:mapper/*.xml
  configuration:
    map-underscore-to-camel-case: true

aliyun:
  oss:
    endPoint: oss-cn-beijing.aliyuncs.com
    accessKeyId: LTAITuSh49mMQCi2
    accessKeySecret: TVac6ND2MmfmVi2hB7nYvpPtzMTUnK
    bucketName: codewj
    ossUrl: http://codewj.oss-cn-beijing.aliyuncs.com
#com:
#  mqtt:
#    host: tcp://144.34.177.162:1883
#    clientid: onejane
#    username: test1
#    password: test123
#    subscribeTopic: /sys/GW99000001/send
#    publishTopic: /sys/AE99000001/receive
#    timeout: 10
#    keepalive: 90
#    maxInflight: 1000000

com:
  mqtt:
    host: tcp://192.168.2.6:1883
    clientid: onejane
    username: admin
    password: public
    subscribeTopic: /sys/GW99000001/send
    publishTopic: /sys/GW99000001/send
    timeout: 10
    keepalive: 90
    maxInflight: 1000000
    filePath: F:/code
    fileurl: http://127.0.0.1:88/

server:
  port: 10000

jwt:
  config:
    key: codewj
    ttl: 3600000


# 配置的补充与优先级 在dev中没有配置age,所以会采用主配置的，在prod中配置dev,会按照精确优先，使用dev中的配置
#home 目录下的 devtools 全局设置属性（~/.spring-boot-devtools.properties，如果 devtools 激活）。
#测试用例上的@TestPropertySource 注解。
#测试用例上的@SpringBootTest#properties 注解。
#命令行参数
#来自 SPRING_APPLICATION_JSON 的属性（环境变量或系统属性中内嵌的内联 JSON）。
#ServletConfig 初始化参数。
#ServletContext 初始化参数。
#来自于 java:comp/env 的 JNDI 属性。
#Java 系统属性（System.getProperties()）。
#操作系统环境变量。
#RandomValuePropertySource，只包含 random.*中的属性。
#没有打进 jar 包的 Profile-specific 应用属性（application-{profile}.properties 和 YAML 变量）
#打进 jar 包中的 Profile-specific 应用属性（application-{profile}.properties 和 YAML 变量）。
#没有打进 jar 包的应用配置（application.properties 和 YAML 变量）。
#打进 jar 包中的应用配置（application.properties 和 YAML 变量）。
#@Configuration 类上的@PropertySource 注解。
#默认属性（使用 SpringApplication.setDefaultProperties 指定）。
#这里做一下说明，上文第 12,14 点没有打进 jar 包的文件指的是在启动时候通过 spring.config.location 参数指定的外部配置文件，外部配置文件的优先级应该是大于 jar 中的配置文件。

#对上面的配置中常用的规则可以精简如下：

#命令行 > application-{profile}.yml > application.yml > 默认属性
programmer:
  age: 999

